#!/bin/bash
<%# coding: UTF-8%>
# Auto-generated by Chef, do not edit!
### BEGIN INIT INFO
# Provides: serf
# Short-Description: Serf agent
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
# chkconfig: 2345 95 20
# description: Serf agent
# processname: serf
### END INIT INFO

NAME="Serf Agent"
SERF_BINARY=<%= @helper.getSerfBinary %>
SERF_AGENT_LOG=<%= @helper.getAgentLog %>
SERF_AGENT_CONF_FILE=<%= @helper.getAgentConfig %>
SERF_AGENT_CONF_DIR=<%= @helper.getHomeConfigDirectory %>
SERF_USER=<%= node["serf"]["user"] %>

SLEEP_TIME=5
CURRENT_WAIT=30
TIMEOUT=60

start() {
    findPid
    
    if [ "" = "$FOUND_PID" ]; then
      serf_start=`su -l $SERF_USER -c "$SERF_BINARY agent --config-dir $SERF_AGENT_CONF_DIR >>$SERF_AGENT_LOG 2>&1 &"`

      counter=0
      echo "Joining cluster..!"
      while true; do
        if [[ `serf members | wc -l` -gt 1 ]]; then
             echo "Joined cluster..!"
             break;
        fi
        echo "Waiting for serf cluster"
        sleep $SLEEP_TIME;
        counter=$((counter+1))
        if [[ "$counter" -gt 20 ]]; then
          echo "Counter: $counter times reached; giving up!"
          break;
        fi
      done
      if [[ $serf_start -ne 0 ]]; then
        echo "Error starting $NAME"
        exit 1
      fi
      
      echo "$NAME successfully started"
      
    else
      echo "$NAME is already running"
    fi
}

stop() {
    findPid
    if [ -z "$FOUND_PID" ]; then
      echo "$NAME is not running, nothing to stop"
    else
    
      while [[ -n $FOUND_PID ]]; 
        do
        echo "Attempting to shutdown $NAME..."
        kill -INT $FOUND_PID
      
        if [[ $? -ne 0 ]]; then
          echo "Error stopping $NAME"
          exit 1
        fi
        
        sleep $SLEEP_TIME
        CURRENT_WAIT=$(($CURRENT_WAIT+$SLEEP_TIME))
        if [[ $CURRENT_WAIT -gt $TIMEOUT ]]; then
          echo "Timed out waiting for $NAME to stop, please check serf process"
          exit 1
        fi
        findPid
      done
      
      echo "Stopped $NAME"
      
    fi
}

status() {
  findPid
  if [ -z "$FOUND_PID" ]; then
    echo "$NAME is not running" ; exit 1
  else
    echo "$NAME is running : $FOUND_PID" 
  fi
}

reload() {
  findPid
  if [ -z "$FOUND_PID" ]; then
    echo "$NAME is not running" ; exit 1
  else
    kill -HUP $FOUND_PID
    echo "Reloaded $NAME" 
  fi
}

findPid() {
    FOUND_PID=`pgrep -f $SERF_BINARY`
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  restart)
    stop
    start
  ;;
  status)
    status
  ;;
  reload)
    reload
  ;;
  *)
    echo "Usage: $0 {start|stop|restart|status|reload}"
    exit 1
esac

exit 0
